input {
  gelf {
    port => 12201
    host => "0.0.0.0"
    use_udp => false
    use_tcp => true
  }
}

filter {
  if [container_name] {
    mutate {
      add_field => { "app_name" => "%{[container_name]}" }
    }
    mutate {
      gsub => [
        "app_name", "^/+", "",    # Remove leading slashes
        "app_name", "docker_", "" # Remove 'docker_' prefix if present
      ]
      add_field => { "[data_stream][dataset]" => "%{[app_name]}" }
    }
  }

  if [app_name] =~ "nginx" {
    json {
      source => "message"
      target => "modsecurity"
      skip_on_invalid_json => true
    }

    if [modsecurity] {
      mutate {
        replace => { "app_name" => "modsecurity" }
        replace => { "[data_stream][dataset]" => "%{[app_name]}" }
      }

      mutate {
        rename => { "[modsecurity][transaction]" => "transaction" }
        rename => { "[modsecurity][producer]" => "producer" }
        rename => { "[modsecurity][messages]" => "messages" }
      }

      if [transaction] {
        mutate {
          add_field => {
            "client_ip" => "%{[transaction][client_ip]}"
            "host_ip" => "%{[transaction][host_ip]}"
            "host_port" => "%{[transaction][host_port]}"
            "unique_id" => "%{[transaction][unique_id]}"
          }
        }
        date {
          match => [ "[transaction][time_stamp]", "EEE MMM dd HH:mm:ss yyyy" ]
          target => "@timestamp"
        }
      }
    } else {
      grok {
        match => { "message" => "%{NGINX_ACCESS}" }
      }
      date {
        match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
        target => "@timestamp"
      }
    }
  } else if [app_name] =~ "auth" or [app_name] =~ "pong" or [app_name] =~ "chat" {
    grok {
      match => { "message" => "%{DJANGO_LOG}" }
    }
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
  } else if [app_name] =~ "rabbitmq" {
    grok {
      match => { "message" => "%{RABBITMQ_LOG}" }
    }
    date {
      match => [ "timestamp", "yyyy-MMM-dd HH:mm:ss.SSS+Z" ]
      target => "@timestamp"
    }
  } else if [app_name] =~ "db" {
    grok {
      match => { "message" => "%{POSTGRES_LOG}" }
    }
    date {
      match => [ "timestamp", "dd/MMM/yyyy HH:mm:ss.SSS z" ]
      target => "@timestamp"
    }
  } else {
    # Generic parsing for other applications
    grok {
      match => { "message" => "%{COMMON_LOG_FORMAT}" }
    }
  }

  # Add log level if available
  if ![log_level] and [message] =~ /(?i)(error|warn|info|debug)/ {
    grok {
      match => { "message" => "%{LOGLEVEL:log_level}" }
    }
  }

  # Clean up unnecessary fields
  mutate {
    remove_field => [ "command", "container_id", "container_name", "host" ]
  }
}

output {
  elasticsearch {
    hosts => "${ELASTIC_HOSTS}"
    user => "elastic"
    password => "${ELASTIC_PASSWORD}"
    ecs_compatibility => "v8"
    ssl_certificate_authorities => "certs/transcendence.crt"
    data_stream => "true"
    data_stream_type => "logs"
    data_stream_namespace => "default"
  }
  # stdout { codec => rubydebug }
}