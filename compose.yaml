name: transcendence

x-base: &base
  env_file:
    - .env
  networks:
    - transcendence
  volumes:
    - vault-ca:/ca
  restart: unless-stopped
  init: true

x-db: &db
  <<: *base
  build:
    context: db
  shm_size: 128mb

services:
  nginx:
    <<: *base
    container_name: nginx
    build:
      context: frontend
      dockerfile: Dockerfile.nginx
    depends_on:
      auth:
        condition: service_started
    environment:
      - APP_RID=${NGINX_RID}
      - APP_SID=${NGINX_SID}
    volumes:
      - ./frontend/static/dist:/usr/share/nginx/html
      - media-files:/media
      - nginx-ssl:/etc/ssl
      - static-files:/static
      - vault-ca:/ca
    ports:
      - "80:8080"
      - "443:8443"
  vite-builder:
    <<: *base
    container_name: vite-builder
    build:
      context: frontend
      dockerfile: Dockerfile.vite
    depends_on:
      nginx:
        condition: service_started
    volumes:
      - ./frontend/static:/app
      - /app/node_modules
  vault:
    <<: *base
    container_name: vault
    build:
      context: vault
      dockerfile: Dockerfile.server
    cap_add:
      - IPC_LOCK
    command: ["vault", "server", "-config=/vault/config/config.hcl"]
    volumes:
      - vault-ca:/vault/ca
      - vault-config:/vault/config
      - vault-data:/vault/file
      - vault-pki:/vault/pki
      - vault-ssl:/vault/ssl
  vault-init:
    <<: *base
    container_name: vault-init
    build:
      context: vault
      dockerfile: Dockerfile.init
    depends_on:
      vault:
        condition: service_started
    image: hashicorp/vault:1.17
    restart: no
    volumes:
      - vault-pki:/vault/pki
      - ./vault/ca:/export
      - vault-secrets:/vault/secrets
      - vault-ssl:/vault/ssl
  rabbitmq:
    <<: *base
    container_name: rabbitmq
    image: rabbitmq:management
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
  auth:
    <<: *base
    container_name: auth
    build:
      context: backend
      dockerfile: Dockerfile.app
      args:
        APP_NAME: auth
        HOST: ${HOSTNAME}
    develop:
      watch:
        - action: sync+restart
          path: ./backend/auth/
          target: /auth/
    environment:
      - VAULT_ROLEID=${AUTH_RID}
      - VAULT_SECRETID=${AUTH_SID}
    env_file:
      - .env
    volumes:
      - auth-ssl:/etc/ssl
      - media-files:/media
      - static-files:/static
      - vault-ca:/ca
  auth-worker:
    <<: *base
    container_name: auth-worker
    build:
      context: backend
      dockerfile: Dockerfile.worker
      args:
        APP_NAME: auth
        HOST: ${HOSTNAME}
    develop:
      watch:
        - action: sync+restart
          path: ./backend/auth/
          target: /auth/
    environment:
      - VAULT_ROLEID=${AUTH_RID}
      - VAULT_SECRETID=${AUTH_SID}
    env_file:
      - .env
    volumes:
      - auth-ssl:/etc/ssl
      - media-files:/media
      - static-files:/static
      - vault-ca:/ca
  auth-db:
    <<: *db
    container_name: auth-db
    environment:
      - DB_NAME=auth
    volumes:
      - auth-db:/var/lib/postgresql/data
  pong:
    <<: *base
    container_name: pong
    build:
      context: backend
      dockerfile: Dockerfile.app
      args:
        APP_NAME: pong
        HOST: ${HOSTNAME}
    develop:
      watch:
        - action: sync+restart
          path: ./backend/pong/
          target: /pong/
    environment:
      - VAULT_ROLEID=${PONG_RID}
      - VAULT_SECRETID=${PONG_SID}
    env_file:
      - .env
    volumes:
      - media-files:/media
      - pong-ssl:/etc/ssl
      - static-files:/static
      - vault-ca:/ca
  pong-worker:
    <<: *base
    container_name: pong-worker
    build:
      context: backend
      dockerfile: Dockerfile.worker
      args:
        APP_NAME: pong
        HOST: ${HOSTNAME}
    develop:
      watch:
        - action: sync+restart
          path: ./backend/pong/
          target: /pong/
    environment:
      - VAULT_ROLEID=${PONG_RID}
      - VAULT_SECRETID=${PONG_SID}
    env_file:
      - .env
    volumes:
      - pong-ssl:/etc/ssl
      - media-files:/media
      - static-files:/static
      - vault-ca:/ca
  pong-db:
    <<: *db
    container_name: pong-db
    environment:
      - DB_NAME=pong
    volumes:
      - pong-db:/var/lib/postgresql/data
  chat:
    <<: *base
    container_name: chat
    build:
      context: backend
      dockerfile: Dockerfile.app
      args:
        APP_NAME: chat
        HOST: ${HOSTNAME}
    develop:
      watch:
        - action: sync+restart
          path: ./backend/chat/
          target: /chat/
    environment:
      - VAULT_ROLEID=${CHAT_RID}
      - VAULT_SECRETID=${CHAT_SID}
    env_file:
      - .env
    volumes:
      - media-files:/media
      - chat-ssl:/etc/ssl
      - static-files:/static
      - vault-ca:/ca
  chat-db:
    <<: *db
    container_name: chat-db
    environment:
      - DB_NAME=chat
    volumes:
      - chat-db:/var/lib/postgresql/data
  chat-worker:
    <<: *base
    container_name: chat-worker
    build:
      context: backend
      dockerfile: Dockerfile.worker
      args:
        APP_NAME: chat
        HOST: ${HOSTNAME}
    develop:
      watch:
        - action: sync+restart
          path: ./backend/chat/
          target: /chat/
    environment:
      - VAULT_ROLEID=${CHAT_RID}
      - VAULT_SECRETID=${CHAT_SID}
    env_file:
      - .env
    volumes:
      - chat-ssl:/etc/ssl
      - media-files:/media
      - static-files:/static
      - vault-ca:/ca


networks:
  transcendence:
    name: transcendence
    driver: bridge

volumes:
  auth-db:
  auth-ssl:
  chat-db:
  chat-ssl:
  media-files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "backend/media"
  nginx-ssl:
  pong-db:
  pong-ssl:
  rabbitmq-data:
  static-files:
  vault-ca:
  vault-config:
  vault-data:
  vault-pki:
  vault-secrets:
  vault-ssl: